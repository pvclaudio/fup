import streamlit as st
import pandas as pd
from datetime import datetime, date
import yagmail
from io import BytesIO
from pathlib import Path
import plotly.express as px
import os
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
import zipfile
import tempfile
import json
from oauth2client.client import OAuth2Credentials
import httplib2
import traceback
import openai
import json
import httpx
from sentence_transformers import SentenceTransformer, util
from openai import OpenAI
import json
import requests
import tempfile
from difflib import get_close_matches
import re
from datetime import timedelta
import matplotlib.pyplot as plt
from docx import Document
from docx.shared import Pt

st.set_page_config(layout = 'wide')

st.write("Hoje:", pd.Timestamp.today())

#st.sidebar.text(f"Diret√≥rio atual: {os.getcwd()}")

caminho_csv = "followups.csv"
admin_users = ["cvieira", "amendonca", "mathayde"]
cadastro_users = ["cvieira", "amendonca", "mathayde"]
chat_users = ["cvieira", "amendonca", "mathayde","bromanelli","ysouza"]

def enviar_email_gmail(destinatario, assunto, corpo_html):
    try:
        yag = yagmail.SMTP(user=st.secrets["email_user"], password=st.secrets["email_pass"])
        yag.send(to=destinatario, subject=assunto, contents=corpo_html)
        return True
    except Exception as e:
        st.error(f"Erro ao enviar e-mail: {e}")
        return False
    
def conectar_drive():
    cred_dict = st.secrets["credentials"]

    credentials = OAuth2Credentials(
        access_token=cred_dict["access_token"],
        client_id=cred_dict["client_id"],
        client_secret=cred_dict["client_secret"],
        refresh_token=cred_dict["refresh_token"],
        token_expiry=datetime.strptime(cred_dict["token_expiry"], "%Y-%m-%dT%H:%M:%SZ"),
        token_uri=cred_dict["token_uri"],
        user_agent="streamlit-app/1.0",
        revoke_uri=cred_dict["revoke_uri"]
    )

    # Atualiza token se expirado
    if credentials.access_token_expired:
        credentials.refresh(httplib2.Http())

    gauth = GoogleAuth()
    gauth.credentials = credentials
    drive = GoogleDrive(gauth)
    return drive

def upload_para_drive():
    try:
        drive = conectar_drive()
        arquivo = drive.CreateFile({'title': 'followups.csv'})
        arquivo.SetContentFile(caminho_csv)
        arquivo.Upload()
        st.info("üì§ Arquivo 'followups.csv' enviado ao Google Drive com sucesso.")
    except Exception as e:
        st.warning(f"Erro ao enviar para o Drive: {e}")

def upload_evidencias_para_drive(idx, arquivos, observacao):
    try:
        drive = conectar_drive()
        pasta_principal = None

        # Procura ou cria a pasta principal "evidencias"
        lista = drive.ListFile({'q': "title='evidencias' and mimeType='application/vnd.google-apps.folder' and trashed=false"}).GetList()
        if lista:
            pasta_principal = lista[0]
        else:
            pasta_principal = drive.CreateFile({'title': 'evidencias', 'mimeType': 'application/vnd.google-apps.folder'})
            pasta_principal.Upload()

        # Cria subpasta indice_x
        subpasta_nome = f"indice_{idx}"
        subpastas = drive.ListFile({'q': f"'{pasta_principal['id']}' in parents and title='{subpasta_nome}' and mimeType='application/vnd.google-apps.folder' and trashed=false"}).GetList()
        if subpastas:
            subpasta = subpastas[0]
        else:
            subpasta = drive.CreateFile({'title': subpasta_nome, 'mimeType': 'application/vnd.google-apps.folder', 'parents': [{'id': pasta_principal['id']}]})
            subpasta.Upload()

        # Envia arquivos
        for arq in arquivos:
            arquivo_drive = drive.CreateFile({'title': arq.name, 'parents': [{'id': subpasta['id']}]})
            
            with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                tmp_file.write(arq.getvalue())
                tmp_file.flush()
                arquivo_drive.SetContentFile(tmp_file.name)
                arquivo_drive.Upload()

        # Observa√ß√£o
        if observacao.strip():
            obs_file = drive.CreateFile({'title': 'observacao.txt', 'parents': [{'id': subpasta['id']}]})
            obs_file.SetContentString(observacao.strip())
            obs_file.Upload()

        st.success("‚úÖ Evid√™ncias enviadas ao Google Drive com sucesso.")
        return True
    except Exception as e:
        st.error(f"Erro ao enviar evid√™ncias para o Drive: {e}")
        return False
        
def carregar_followups():
    drive = conectar_drive()
    arquivos = drive.ListFile({'q': "title = 'followups.csv' and trashed=false"}).GetList()

    colunas = [
        "Titulo", "Ambiente", "Ano", "Auditoria", "Risco",
        "Plano de Acao", "Responsavel", "Usuario", "E-mail",
        "Prazo", "Data de Conclus√£o", "Status", "Avalia√ß√£o FUP", "Observa√ß√£o"
    ]

    if not arquivos:
        df_vazio = pd.DataFrame(columns=colunas)
        caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".csv").name
        df_vazio.to_csv(caminho_temp, sep=";", index=False, encoding="utf-8-sig")
        novo_arquivo = drive.CreateFile({'title': 'followups.csv'})
        novo_arquivo.SetContentFile(caminho_temp)
        novo_arquivo.Upload()
        return df_vazio

    caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
    arquivos[0].GetContentFile(caminho_temp)

    try:
        df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")
    except UnicodeDecodeError:
        df = pd.read_csv(caminho_temp, sep=";", encoding="latin1")

    return df

def aplicar_filtros_df(df, pergunta):
    filtros = {}
    valores_unicos = {}

    for col in df.select_dtypes(include="object").columns:
        valores_unicos[col] = df[col].astype(str).str.lower().str.strip().unique().tolist()

    tokens = re.findall(r"\w+", pergunta.lower())

    for token in tokens:
        for col, valores in valores_unicos.items():
            match = get_close_matches(token, valores, n=1, cutoff=0.8)
            if match:
                filtros[col] = match[0]
                break

    df_filtrado = df.copy()

    for col, valor in filtros.items():
        df_filtrado[col] = df_filtrado[col].astype(str).str.lower().str.strip()
        df_filtrado = df_filtrado[df_filtrado[col].str.contains(valor)]

    return df_filtrado, filtros

# --- Usu√°rios e autentica√ß√£o simples ---
@st.cache_data
def carregar_usuarios():
    usuarios_config = st.secrets.get("users", {})
    usuarios = {}
    for user, dados in usuarios_config.items():
        try:
            nome, senha = dados.split("|", 1)
            usuarios[user] = {"name": nome, "password": senha}
        except:
            st.warning(f"Erro ao carregar usu√°rio '{user}' nos secrets.")
    return usuarios

users = carregar_usuarios()

if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.username = ""

if not st.session_state.logged_in:
    st.title("üîê Login")
    username = st.text_input("Usu√°rio")
    password = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        user = users.get(username)
        if user and user["password"] == password:
            st.session_state.logged_in = True
            st.session_state.username = username
            st.success(f"Bem-vindo, {user['name']}!")
            st.rerun()
        else:
            st.error("Usu√°rio ou senha incorretos.")
    st.stop()

# --- Layout principal ap√≥s login ---
st.sidebar.image("PRIO_SEM_POLVO_PRIO_PANTONE_LOGOTIPO_Azul.png")
nome_usuario = users[st.session_state.username]["name"]
st.sidebar.success(f"Logado como: {nome_usuario}")
if st.sidebar.button("Logout"):
    st.session_state.logged_in = False
    st.session_state.username = ""
    st.rerun()

# --- Menu lateral ---
st.sidebar.title("üìã Menu")
menu = st.sidebar.radio("Navegar para:", [
    "Dashboard",
    "Meus Follow-ups",
    "Cadastrar Follow-up",
    "Enviar Evid√™ncias",
    "Visualizar Evid√™ncias",
    "üîç Chatbot FUP"
])

# --- Conte√∫do das p√°ginas ---

if menu == "Dashboard":
    st.title("üìä Painel de KPIs")

    try:
        # Conecta ao Google Drive
        drive = conectar_drive()
    
        # Procura arquivo chamado 'followups.csv'
        arquivos = drive.ListFile({
            'q': "title = 'followups.csv' and trashed=false"
        }).GetList()
    
        if not arquivos:
            st.warning("Arquivo followups.csv n√£o encontrado no Drive.")
            st.stop()
    
        arquivo = arquivos[0]
        caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
        arquivo.GetContentFile(caminho_temp)
    
        # Carrega CSV com pandas
        df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")
        df.columns = df.columns.str.strip()
    
        usuario_logado = st.session_state.username
        nome_usuario = users[usuario_logado]["name"]
    
        if usuario_logado not in admin_users:
            df = df[df["Responsavel"].str.lower() == nome_usuario.lower()]
    
        if df.empty:
            st.info("Nenhum dado dispon√≠vel para exibir KPIs.")
            st.stop()
    
        df["Prazo"] = pd.to_datetime(df["Prazo"], format="mixed", errors="coerce")
        df["Ano"] = df["Ano"].astype(str)
        df["Status"] = df["Status"].fillna("N√£o informado")
    
        # --- KPIs principais ---
        total = len(df)
        concluidos = (df["Status"] == "Conclu√≠do").sum()
        pendentes = (df["Status"] == "Pendente").sum()
        andamento = (df["Status"] == "Em Andamento").sum()
        taxa_conclusao = round((concluidos / total) * 100, 1) if total > 0 else 0.0
    
        col1, col2, col3, col4, col5 = st.columns(5)
        col1.metric("Total Follow-ups", total)
        col2.metric("Conclu√≠dos", concluidos)
        col3.metric("Pendentes", pendentes)
        col4.metric("Em Andamento", andamento)
        col5.metric("Conclus√£o (%)", f"{taxa_conclusao}%")
    
        # --- Gr√°ficos ---
        st.subheader("üìå Distribui√ß√£o por Status")
        fig_status = px.pie(
            df,
            names="Status",
            title="Distribui√ß√£o dos Follow-ups por Status",
            hole=0.4
        )
        st.plotly_chart(fig_status, use_container_width=True)
    
        st.subheader("üìÅ Follow-ups por Auditoria")
        auditoria_counts = df["Auditoria"].value_counts().reset_index()
        auditoria_counts.columns = ["Auditoria", "Quantidade"]

        fig_auditoria = px.bar(
            auditoria_counts,
            x="Auditoria",
            y="Quantidade",
            title="Distribui√ß√£o de Follow-ups por Auditoria"
        )
        st.plotly_chart(fig_auditoria, use_container_width=True)
    
        st.subheader("üìÖ Follow-ups por Ano")
        ano_counts = df["Ano"].value_counts().sort_index().reset_index()
        ano_counts.columns = ["Ano", "Quantidade"]
        ano_counts["Ano"] = ano_counts["Ano"].astype(str)
        anos_existentes = ano_counts["Ano"].tolist()
        ano_counts["Ano"] = pd.Categorical(ano_counts["Ano"], categories=anos_existentes, ordered=True)
        
        fig_ano = px.line(
            ano_counts,
            x="Ano",
            y="Quantidade",
            markers=True,
            title="Evolu√ß√£o de Follow-ups por Ano"
        )
        fig_ano.update_xaxes(type='category')
        
        st.plotly_chart(fig_ano, use_container_width=True)

    except Exception as e:
        st.error(f"Erro ao acessar dados do Drive: {e}")

elif menu == "Meus Follow-ups":
    st.title("üìÅ Meus Follow-ups")
    st.info("Esta se√ß√£o exibir√° os follow-ups atribu√≠dos a voc√™.")

    try:
        df = carregar_followups()
        df.columns = df.columns.str.strip()

        usuario_logado = st.session_state.username
        nome_usuario = users[usuario_logado]["name"]

        if usuario_logado not in admin_users:
            df = df[df["Responsavel"].str.lower() == nome_usuario.lower()]
            
        df["Prazo"] = pd.to_datetime(df["Prazo"], format = "mixed", errors="coerce")
        #df["Prazo"] = df["Prazo"].dt.strftime("%d/%m/%Y")
        df["Data de Conclus√£o"] = pd.to_datetime(df["Data de Conclus√£o"], format = "mixed", errors="coerce")
        #df["Data de Conclus√£o"] = df["Data de Conclus√£o"].dt.strftime("%d/%m/%Y")
        df["Ano"] = df["Ano"].astype(str)
        df["Ambiente"] = df["Ambiente"].str.lower()

        # --- Filtros na sidebar ---
        st.sidebar.subheader("Filtros de Pesquisa")

        if st.sidebar.button("üîÑ Limpar Filtros"):
            st.rerun()

        auditorias = ["Todos"] + sorted(df["Auditoria"].dropna().unique().tolist())
        auditoria_selecionada = st.sidebar.selectbox("Auditoria", auditorias)

        status_lista = ["Todos"] + sorted(df["Status"].dropna().unique().tolist())
        status_selecionado = st.sidebar.selectbox("Status", status_lista)

        status_ambiente = ["Todos"] + sorted(df["Ambiente"].dropna().unique().tolist())
        status_ambiente_selecionado = st.sidebar.selectbox("Ambiente", status_ambiente)

        anos = ["Todos"] + sorted(df["Ano"].dropna().unique().tolist())
        ano_selecionado = st.sidebar.selectbox("Ano", anos)

        prazo_inicial, prazo_final = st.sidebar.date_input(
            "Intervalo de Prazo",
            [df["Prazo"].min().date(), df["Prazo"].max().date()]
        )

        if auditoria_selecionada != "Todos":
            df = df[df["Auditoria"] == auditoria_selecionada]

        if status_selecionado != "Todos":
            df = df[df["Status"] == status_selecionado]

        if status_ambiente_selecionado != "Todos":
            df = df[df["Ambiente"] == status_ambiente_selecionado]
        
        if ano_selecionado != "Todos":
            df = df[df["Ano"] == ano_selecionado]

        df = df[(df["Prazo"].dt.date >= prazo_inicial) & (df["Prazo"].dt.date <= prazo_final)]
        df = df.sort_values(by="Prazo")

        if not df.empty:
            df["Ambiente"] = df["Ambiente"].str.lower()
            st.dataframe(df, use_container_width=True)
            st.success(f"Total Follow Ups: {len(df)}")

            st.subheader("üõ†Ô∏è Atualizar / Excluir Follow-up por √çndice")

            indices_disponiveis = df.index.tolist()
            indice_selecionado = st.selectbox("Selecione o √≠ndice para edi√ß√£o", indices_disponiveis)

            linha = df.loc[indice_selecionado]
            st.markdown(f"""
            üîé **T√≠tulo:** {linha['Titulo']}  
            üìÖ **Prazo:** {linha['Prazo'].strftime('%d/%m/%Y')}  
            üë§ **Respons√°vel:** {linha['Responsavel']}  
            üìå **Status:** {linha['Status']}
            """)

            colunas_editaveis = [col for col in df.columns]
            coluna_escolhida = st.selectbox("Selecione a coluna para alterar", colunas_editaveis)

            valor_atual = linha[coluna_escolhida]

            if coluna_escolhida in ["Prazo", "Data de Conclus√£o"]:
                try:
                    data_inicial = pd.to_datetime(valor_atual).date()
                except:
                    data_inicial = date.today()
                novo_valor = st.date_input(f"Novo valor para '{coluna_escolhida}':", value=data_inicial)
                novo_valor_str = novo_valor.strftime("%Y-%m-%d")
            else:
                novo_valor = st.text_input(f"Valor atual de '{coluna_escolhida}':", value=str(valor_atual))
                novo_valor_str = novo_valor.strip()

            if st.button("üíæ Atualizar campo"):
                df_original = carregar_followups()
                df_original.at[indice_selecionado, coluna_escolhida] = novo_valor_str
                df_original.to_csv(caminho_csv, sep=";", index=False, encoding="utf-8-sig")

                try:
                    drive = conectar_drive()
                    arquivos = drive.ListFile({'q': "title = 'followups.csv' and trashed=false"}).GetList()
                    if arquivos:
                        arquivo = arquivos[0]
                        arquivo.SetContentFile(caminho_csv)
                        arquivo.Upload()
                    st.info("üì§ Arquivo 'followups.csv' atualizado no Drive.")
                except Exception as e:
                    st.warning(f"Erro ao enviar para o Drive: {e}")

                st.success(f"'{coluna_escolhida}' atualizado com sucesso.")
                st.rerun()

            if usuario_logado in admin_users:
                if st.button("üóëÔ∏è Excluir este follow-up"):
                    df_original = df.drop(index=indice_selecionado)
                    df_original.to_csv(caminho_csv, sep=";", index=False, encoding="utf-8-sig")

                    try:
                        drive = conectar_drive()
                        arquivos = drive.ListFile({'q': "title = 'followups.csv' and trashed=false"}).GetList()
                        if arquivos:
                            arquivo = arquivos[0]
                            arquivo.SetContentFile(caminho_csv)
                            arquivo.Upload()
                        st.info("üì§ Arquivo 'followups.csv' atualizado no Google Drive.")
                    except Exception as e:
                        st.warning(f"Erro ao enviar para o Drive: {e}")

                    st.success("Follow-up exclu√≠do com sucesso.")
                    st.rerun()

            buffer = BytesIO()
            with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='FollowUps')

            st.download_button(
                label="üì• Exportar resultados para Excel",
                data=buffer.getvalue(),
                file_name="followups_filtrados.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        else:
            st.info("Nenhum follow-up encontrado com os filtros aplicados.")

    except Exception as e:
        st.error(f"Erro ao acessar dados do Drive: {e}")

elif menu == "Cadastrar Follow-up":
    st.title("üìù Cadastrar Follow-up")
    if st.session_state.username in cadastro_users:
        st.info("Aqui voc√™ poder√° cadastrar um novo follow-up.")
    
        with st.form("form_followup"):
            titulo = st.text_input("T√≠tulo")
            ambiente = st.text_input("Ambiente")
            ano = st.selectbox("Ano", list(range(2020, date.today().year + 2)))
            auditoria = st.text_input("Auditoria")
            risco = st.selectbox("Risco", ["Baixo", "M√©dio", "Alto"])
            plano = st.text_area("Plano de A√ß√£o")
            responsavel = st.text_input("Respons√°vel")
            usuario = st.text_input("Usu√°rio")
            email = st.text_input("E-mail do Respons√°vel")
            prazo = st.date_input("Prazo", min_value=date.today())
            data_conclusao = st.date_input("Data de Conclus√£o", value=date.today())
            status = st.selectbox("Status", ["Pendente", "Em Andamento", "Conclu√≠do"])
            avaliacao = st.selectbox("Avalia√ß√£o FUP", ["", "Satisfat√≥rio", "Insatisfat√≥rio"])
            observacao = st.text_area("Observa√ß√£o")
    
            submitted = st.form_submit_button("Salvar Follow-up")
    
        if submitted:
            novo = {
                "Titulo": titulo,
                "Ambiente": ambiente,
                "Ano": ano,
                "Auditoria": auditoria,
                "Risco": risco,
                "Plano de Acao": plano,
                "Responsavel": responsavel,
                "Usuario": usuario,
                "E-mail": email,
                "Prazo": prazo.strftime("%Y-%m-%d"),
                "Data de Conclus√£o": data_conclusao.strftime("%Y-%m-%d"),
                "Status": status,
                "Avalia√ß√£o FUP": avaliacao,
                "Observa√ß√£o": observacao
            }
    
            try:
                # Conecta ao Drive e busca o followups.csv
                drive = conectar_drive()
                arquivos = drive.ListFile({
                    'q': "title = 'followups.csv' and trashed=false"
                }).GetList()
    
                if arquivos:
                    arquivo = arquivos[0]
                    caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
                    arquivo.GetContentFile(caminho_temp)
                    df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")
                else:
                    df = pd.DataFrame()
                    arquivo = drive.CreateFile({'title': 'followups.csv'})
    
                # Atualiza e salva
                df = pd.concat([df, pd.DataFrame([novo])], ignore_index=True)
                df.to_csv(caminho_csv, sep=";", index=False, encoding="utf-8-sig")
    
                arquivo.SetContentFile(caminho_csv)
                arquivo.Upload()
    
                st.success("‚úÖ Follow-up salvo e sincronizado com o Drive!")
    
                corpo = f"""
                <p>Ol√° <b>{responsavel}</b>,</p>
                <p>Um novo follow-up foi atribu√≠do a voc√™:</p>
                <ul>
                    <li><b>T√≠tulo:</b> {titulo}</li>
                    <li><b>Auditoria:</b> {auditoria}</li>
                    <li><b>Plano de Acao:</b> {plano}</li>
                    <li><b>Prazo:</b> {prazo.strftime('%d/%m/%Y')}</li>
                    <li><b>Status:</b> {status}</li>
                </ul>
                <p>Acesse o aplicativo para incluir evid√™ncias e acompanhar o andamento:</p>
                <p><a href='https://fup-auditoria.streamlit.app/' target='_blank'>üîó fup-auditoria.streamlit.app</a></p>
                <br>
                <p>Atenciosamente,<br>Auditoria Interna</p>
                """
    
                if email:
                    sucesso_envio = enviar_email_gmail(
                        destinatario=email,
                        assunto=f"[Follow-up] Nova Atribui√ß√£o: {titulo}",
                        corpo_html=corpo
                    )
                    if sucesso_envio:
                        st.success("üìß E-mail de notifica√ß√£o enviado com sucesso!")
    
            except Exception as e:
                st.error(f"Erro ao cadastrar follow-up: {e}")
    else:
        st.warning("Voc√™ n√£o possui permiss√£o para cadastrar follow ups!")

elif menu == "Enviar Evid√™ncias":
    st.title("üìå Enviar Evid√™ncias")
    st.info("Aqui voc√™ poder√° enviar comprovantes e observa√ß√µes para follow-ups.")

    try:
        # üîÑ Puxa o arquivo mais recente do Drive
        drive = conectar_drive()
        arquivos_drive = drive.ListFile({
            'q': "title = 'followups.csv' and trashed=false"
        }).GetList()

        if not arquivos_drive:
            st.warning("Arquivo followups.csv n√£o encontrado no Google Drive.")
            st.stop()

        arquivo_drive = arquivos_drive[0]
        caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
        arquivo_drive.GetContentFile(caminho_temp)
        df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")
        df.columns = df.columns.str.strip()

        usuario_logado = st.session_state.username
        nome_usuario = users[usuario_logado]["name"]

        if usuario_logado not in admin_users:
            df = df[df["Responsavel"].str.lower() == nome_usuario.lower()]

        if df.empty:
            st.info("Nenhum follow-up dispon√≠vel para envio de evid√™ncia.")
            st.stop()

        idx = st.selectbox("Selecione o √≠ndice do follow-up:", df.index.tolist())
        linha = df.loc[idx]

        st.markdown(f"""
        üîé **T√≠tulo:** {linha['Titulo']}  
        üìÖ **Prazo:** {linha['Prazo']}  
        üë§ **Respons√°vel:** {linha['Responsavel']}  
        üìù **Plano de A√ß√£o:** {linha['Plano de Acao']}
        """)

        arquivos = st.file_uploader(
            "Anexe arquivos de evid√™ncia",
            type=["pdf", "png", "jpg", "jpeg", "zip"],
            accept_multiple_files=True
        )
        observacao = st.text_area("Observa√ß√µes (opcional)")

        submitted = st.button("üì® Enviar Evid√™ncia")
        if submitted:
            if not arquivos:
                st.warning("Voc√™ precisa anexar pelo menos um arquivo.")
                st.stop()

            # Upload direto para o Drive
            sucesso_upload = upload_evidencias_para_drive(idx, arquivos, observacao)

            # Registro em log (local)
            if sucesso_upload:
                try:
                    log_path = Path("log_evidencias.csv")
                    log_data = {
                        "indice": idx,
                        "titulo": linha["Titulo"],
                        "responsavel": linha["Responsavel"],
                        "arquivos": "; ".join([arq.name for arq in arquivos]),
                        "observacao": observacao,
                        "data_envio": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "enviado_por": nome_usuario,
                    }
                    log_df = pd.DataFrame([log_data])
                    if log_path.exists():
                        log_df.to_csv(log_path, mode="a", header=False, index=False)
                    else:
                        log_df.to_csv(log_path, index=False)
                    st.success("‚úÖ Registro salvo no log local.")
                except Exception as e:
                    st.error(f"Erro ao salvar log local: {e}")

                # Enviar e-mail de notifica√ß√£o
                corpo = f"""
                <p>üïµÔ∏è Evid√™ncia enviada para o follow-up:</p>
                <ul>
                    <li><b>√çndice:</b> {idx}</li>
                    <li><b>T√≠tulo:</b> {linha['Titulo']}</li>
                    <li><b>Respons√°vel:</b> {linha['Responsavel']}</li>
                    <li><b>Arquivos:</b> {"; ".join([arq.name for arq in arquivos])}</li>
                    <li><b>Data:</b> {datetime.now().strftime("%d/%m/%Y %H:%M")}</li>
                </ul>
                <p>Evid√™ncias armazenadas no Drive (pasta: <b>evidencias/indice_{idx}</b>).</p>
                """

                destinatarios_evidencias = ["cvieira@prio3.com.br","mathayde@prio3.com.br"]
                
                sucesso_envio = enviar_email_gmail(
                    destinatario=destinatarios_evidencias,
                    assunto=f"[Evid√™ncia] Follow-up #{idx} - {linha['Titulo']}",
                    corpo_html=corpo
                )
                if sucesso_envio:
                    st.success("üìß Notifica√ß√£o enviada ao time de auditoria!")

    except Exception as e:
        st.error(f"Erro ao carregar dados do Drive: {e}")

elif menu == "Visualizar Evid√™ncias":

    st.title("üìÇ Visualiza√ß√£o de Evid√™ncias")

    try:
        drive = conectar_drive()
        df = carregar_followups()
        df.columns = df.columns.str.strip()

        usuario_logado = st.session_state.username
        nome_usuario = users[usuario_logado]["name"].lower()

        # Pasta "evidencias"
        pasta_principal = drive.ListFile({
            'q': "title='evidencias' and mimeType='application/vnd.google-apps.folder' and trashed=false"
        }).GetList()

        if not pasta_principal:
            st.warning("Nenhuma pasta de evid√™ncias encontrada.")
            st.stop()

        pasta_id = pasta_principal[0]['id']

        subpastas = drive.ListFile({
            'q': f"'{pasta_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
        }).GetList()

        if usuario_logado in admin_users:
            opcoes = {
                p['title'].split('_')[1]: {'id': p['id'], 'obj': p}
                for p in subpastas if p['title'].startswith('indice_') and '_' in p['title']
            }
        else:
            indices_usuario = df[df['Responsavel'].str.lower() == nome_usuario].index.astype(str).tolist()
            opcoes = {
                p['title'].split('_')[1]: {'id': p['id'], 'obj': p}
                for p in subpastas
                if p['title'].startswith('indice_') and '_' in p['title'] and p['title'].split('_')[1] in indices_usuario
            }

        if not opcoes:
            st.warning("Voc√™ n√£o possui evid√™ncias associadas.")
            st.stop()

        indices_disponiveis = sorted(opcoes.keys(), key=int)
        indice_escolhido = st.selectbox("Selecione o √≠ndice do follow-up:", indices_disponiveis)

        if indice_escolhido not in opcoes:
            st.error(f"√çndice '{indice_escolhido}' n√£o encontrado.")
            st.stop()

        pasta_selecionada_id = opcoes[indice_escolhido]['id']
        pasta_obj = opcoes[indice_escolhido]['obj']

        st.subheader(f"üìÅ Evid√™ncias para Follow-up #{indice_escolhido}")

        arquivos = drive.ListFile({
            'q': f"'{pasta_selecionada_id}' in parents and trashed=false"
        }).GetList()

        if not arquivos:
            st.info("Nenhum arquivo nesta pasta.")
            st.stop()

        buffer_zip = BytesIO()
        with zipfile.ZipFile(buffer_zip, "w") as zipf:
            for arq in arquivos:
                nome = arq['title']
                if nome.lower() == "observacao.txt":
                    conteudo = arq.GetContentString()
                    st.markdown("**üìù Observa√ß√£o:**")
                    st.info(conteudo)
                    zipf.writestr(nome, conteudo)
                else:
                    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                        arq.GetContentFile(tmp_file.name)
                        tmp_file.seek(0)
                        zipf.write(tmp_file.name, arcname=nome)
                        link = arq['alternateLink']
                        st.markdown(f"üìé [{nome}]({link})", unsafe_allow_html=True)

        buffer_zip.seek(0)
        st.download_button(
            label="üì¶ Baixar todos como .zip",
            data=buffer_zip,
            file_name=f"evidencias_indice_{indice_escolhido}.zip",
            mime="application/zip"
        )

        if usuario_logado in admin_users:
            if st.button("üóëÔ∏è Excluir todas as evid√™ncias deste √≠ndice"):
                try:
                    pasta_obj.Delete()
                    st.success(f"Evid√™ncias do √≠ndice {indice_escolhido} exclu√≠das com sucesso.")
                    st.rerun()
                except Exception as e:
                    st.error(f"Erro ao excluir evid√™ncias: {e}")

    except Exception as e:
        st.error("Erro ao acessar evid√™ncias no Drive.")
        st.code(traceback.format_exc())

elif menu == "üîç Chatbot FUP":

    st.title("ü§ñ Chatbot dos Relat√≥rios de Auditoria")
    
    usuario_logado = st.session_state.username
    nome_usuario = users[usuario_logado]["name"]
    
    df = carregar_followups()
    if df.empty:
        st.warning("Nenhum dado dispon√≠vel.")
        st.stop()
    
    if usuario_logado not in admin_users:
        df = df[df["Responsavel"].str.lower() == nome_usuario.lower()]
    
    st.markdown("### üìù Digite sua pergunta sobre os follow-ups:")
    pergunta = st.text_input(
        "Ex: Quais s√£o os principais riscos dos meus follow-ups? Ou: Me mostre os pontos cr√≠ticos no ambiente SAP.",
        key="pergunta_fup"
    )
    
    if 'executar_analise' not in st.session_state:
        st.session_state.executar_analise = False
    if 'executar_consultor' not in st.session_state:
        st.session_state.executar_consultor = False
    
    # üîò Bot√£o da an√°lise executiva
    if st.button("üì® Executar An√°lise"):
        st.session_state.executar_analise = True
        st.session_state.executar_consultor = False
    
    if st.session_state.executar_analise:
        df_filtrado, filtros = aplicar_filtros_df(df, pergunta)
    
        dados_filtrados = df_filtrado.fillna("").astype(str).to_markdown(index=False) if not df_filtrado.empty else "Nenhum follow-up encontrado."
        dados_completo = df.fillna("").astype(str).to_markdown(index=False)
    
        system_prompt = f"""
    Voc√™ √© um especialista s√™nior em Auditoria, Riscos, Governan√ßa e Controles Internos, com dom√≠nio dos frameworks:
    - COSO, COBIT, ISO 27001, NIST CSF, ITIL e PMBOK.
    
    ### üéØ Sua miss√£o:
    1. Gerar um **SUM√ÅRIO EXECUTIVO** robusto com:
    - Principais riscos dos follow-ups filtrados.
    - Temas cr√≠ticos, controles deficientes, prazos cr√≠ticos.
    - Status (atrasados, pendentes, em andamento).
    - Distribui√ß√£o por ambiente, ano, risco e auditoria.
    - Refer√™ncia aos frameworks relevantes para os riscos identificados.
    
    2. Na sequ√™ncia, liste os follow-ups encontrados:
    - Para cada um, apresente:
      - üìú Descri√ß√£o breve.
      - üî• Status e Risco.
      - üìå Ambiente e Auditoria relacionada.
    
    ---
    
    ### üóÇÔ∏è Base filtrada:
    {dados_filtrados}
    
    ### üèõÔ∏è Base total:
    {dados_completo}
    
    ---
    
    ‚ö†Ô∏è Seja t√©cnico, objetivo e aderente √†s melhores pr√°ticas profissionais.
    """
    
        payload = {
            "model": "gpt-4o",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": pergunta}
            ],
            "temperature": 0.2
        }
    
        headers = {
            "Authorization": f"Bearer {st.secrets['openai']['api_key']}",
            "Content-Type": "application/json"
        }
    
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=payload,
            verify=False
        )
    
        if response.status_code == 200:
            resposta_analise = response.json()["choices"][0]["message"]["content"]
        else:
            resposta_analise = f"Erro na API: {response.status_code} - {response.text}"
    
        st.subheader("üí° Resultado da An√°lise Executiva")
        st.markdown(resposta_analise)
    
        if st.button("üöÄ Consultor de Planos de A√ß√£o"):
            st.session_state.executar_consultor = True
    
    if st.session_state.executar_consultor:
        df_filtrado, filtros = aplicar_filtros_df(df, pergunta)
    
        dados_filtrados = df_filtrado.fillna("").astype(str).to_markdown(index=False) if not df_filtrado.empty else "Nenhum follow-up encontrado."
    
        prompt_consultor = f"""
Voc√™ √© um consultor s√™nior, especialista em governan√ßa, riscos, compliance, auditoria e gest√£o de projetos.

Sua miss√£o √© ajudar o usu√°rio a **sanar os follow-ups identificados**, propondo **formas pr√°ticas e detalhadas de executar cada plano de a√ß√£o existente na base de dados**.

---

### üéØ Para cada follow-up listado na base:
1. **Leia atentamente o conte√∫do do campo "Plano de Acao"** e interprete qual √© a a√ß√£o que est√° sendo proposta.

2. Gere um **plano de execu√ß√£o detalhado**, incluindo:
   - üìú **Descri√ß√£o pr√°tica de como executar o plano de a√ß√£o.**
   - üîß **Ferramentas, metodologias ou sistemas que podem ser utilizados.**
   - ‚úÖ **Crit√©rios de avalia√ß√£o, checklists ou requisitos que devem ser analisados.**
   - üö© **Principais riscos e cuidados que precisam ser tomados durante a execu√ß√£o.**
   - üß† **Boas pr√°ticas de mercado e refer√™ncia aos frameworks aplic√°veis (COBIT, COSO, ISO 27001, NIST, ITIL, PMBOK).**

---

### üí° **Exemplo esperado:**
- Se o plano de a√ß√£o diz: "**Executar due diligence do fornecedor**":
   - Descreva:
     - Como estruturar um processo de due diligence.
     - Quais crit√©rios devem ser avaliados (ex.: integridade, quest√µes financeiras, trabalhistas, ambientais).
     - Quais ferramentas podem ser usadas (ex.: sites p√∫blicos, bases de dados, softwares como LexisNexis, Refinitiv, D&B).
     - Principais cuidados, como veracidade das informa√ß√µes e atualiza√ß√£o dos dados.
     - Frameworks que apoiam essa pr√°tica (ex.: ISO 37001, COSO, Compliance Programs).

---

### üóÇÔ∏è Base de follow-ups:
{dados_filtrados}

---

‚ö†Ô∏è Importante:
- O plano deve ser **100% personalizado com base no conte√∫do real dos planos de a√ß√£o da base**.
- N√£o escreva respostas gen√©ricas.
- Cada follow-up deve gerar uma an√°lise pr√≥pria, com orienta√ß√µes pr√°ticas, espec√≠ficas e acion√°veis.
- Seja extremamente profissional, t√©cnico, detalhado e aderente √†s melhores pr√°ticas internacionais.
"""
    
        payload2 = {
            "model": "gpt-4o",
            "messages": [
                {"role": "system", "content": prompt_consultor},
                {"role": "user", "content": "Como posso estruturar um projeto para resolver meus follow-ups?"}
            ],
            "temperature": 0.2
        }
    
        response2 = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=payload2,
            verify=False
        )
    
        if response2.status_code == 200:
            resposta_consultor = response2.json()["choices"][0]["message"]["content"]
        else:
            resposta_consultor = f"Erro na API: {response2.status_code} - {response2.text}"
    
        st.subheader("üèóÔ∏è Consultoria - Plano de A√ß√£o")
        st.markdown(resposta_consultor)
    
    # üîç Visualizar follow-ups encontrados
    st.markdown("### üìã Follow-ups encontrados:")
    df_filtrado, filtros = aplicar_filtros_df(df, pergunta)
    if not df_filtrado.empty:
        st.dataframe(df_filtrado, use_container_width=True)
    else:
        st.info("Nenhum follow-up encontrado.")
        
# Fun√ß√£o para enviar e-mail mensal com follow-ups vencidos

def enviar_emails_followups_vencidos():
    df = carregar_followups()
    df.columns = df.columns.str.strip()

    df["Prazo"] = pd.to_datetime(df["Prazo"], format="mixed", errors="coerce")
    df["Prazo"] = df["Prazo"].dt.normalize()
    hoje = pd.Timestamp.today().normalize()

    df_vencidos = df[
        (df["Status"].str.lower() != "conclu√≠do") &
        (df["Prazo"] < hoje)
    ]

    if df_vencidos.empty:
        st.info("‚úÖ Nenhum follow-up vencido identificado para envio.")
        return

    # Agrupar por respons√°vel
    responsaveis = df_vencidos["E-mail"].dropna().unique().tolist()

    for email in responsaveis:
        df_resp = df_vencidos[df_vencidos["E-mail"] == email]

        if df_resp.empty:
            continue

        corpo = f"""
        <p>Ol√°,</p>
        <p>Voc√™ possui os seguintes follow-ups vencidos:</p>
        <table border='1' cellpadding='4' cellspacing='0'>
            <tr><th>T√≠tulo</th><th>Auditoria</th><th>Plano de A√ß√£o</th><th>Respons√°vel</th><th>Prazo</th><th>Status</th></tr>
        """

        for _, row in df_resp.iterrows():
            corpo += f"<tr><td>{row['Titulo']}</td><td>{row['Auditoria']}</td><td>{row['Plano de Acao']}</td><td>{row['Responsavel']}</td><td>{row['Prazo'].date()}</td><td>{row['Status']}</td></tr>"

        corpo += """
        </table>
        <p>Por favor, atualize os registros no sistema ou entre em contato com a Auditoria Interna.</p>
        <p>Acesse o aplicativo para incluir evid√™ncias e acompanhar o andamento:</p>
        <p><a href='https://fup-auditoria.streamlit.app/' target='_blank'>üîó fup-auditoria.streamlit.app</a></p>
        <br>
        <p>Atenciosamente,<br>Time de Auditoria</p>
        """

        try:
            yag = yagmail.SMTP(user=st.secrets["email_user"], password=st.secrets["email_pass"])
            yag.send(to=email, subject="üìå Follow-ups vencidos - Auditoria Interna", contents=corpo)
            st.success(f"üìß E-mail enviado para: {email}")
        except Exception as e:
            st.warning(f"Erro ao enviar para {email}: {e}")

# üîÅ Bot√£o para envio manual

if st.session_state.username in admin_users:
    if st.sidebar.button("‚úâÔ∏è Enviar lembrete de follow-ups vencidos"):
        enviar_emails_followups_vencidos()
#-------------------------------------------------------------------- e-mail de follow ups a vencer
def enviar_emails_followups_a_vencer():
    df = carregar_followups()
    df.columns = df.columns.str.strip()
    df["Prazo"] = pd.to_datetime(df["Prazo"], errors="coerce")

    hoje = pd.Timestamp.today()
    limite = hoje + timedelta(days=30)

    df_a_vencer = df[
        (df["Status"].str.lower() != "conclu√≠do") &
        (df["Prazo"] >= hoje) &
        (df["Prazo"] <= limite)
    ]

    if df_a_vencer.empty:
        st.info("‚úÖ Nenhum follow-up com prazo a vencer em 30 dias.")
        return

    responsaveis = df_a_vencer["E-mail"].dropna().unique().tolist()

    for email in responsaveis:
        df_resp = df_a_vencer[df_a_vencer["E-mail"] == email]
        if df_resp.empty:
            continue

        corpo = f"""
        <p>Ol√°,</p>
        <p>Voc√™ possui os seguintes follow-ups com prazo a vencer em at√© 30 dias:</p>
        <table border='1' cellpadding='4' cellspacing='0'>
            <tr><th>T√≠tulo</th><th>Auditoria</th><th>Plano de A√ß√£o</th><th>Respons√°vel</th><th>Prazo</th><th>Status</th></tr>
        """

        for _, row in df_resp.iterrows():
            corpo += f"<tr><td>{row['Titulo']}</td><td>{row['Auditoria']}</td><td>{row['Plano de Acao']}</td><td>{row['Responsavel']}</td><td>{row['Prazo'].date()}</td><td>{row['Status']}</td></tr>"

        corpo += """
        </table>
        <p>Por favor, antecipe a√ß√µes necess√°rias e atualize o status no sistema.</p>
        <p>Acesse o aplicativo para mais detalhes:</p>
        <p><a href='https://fup-auditoria.streamlit.app/' target='_blank'>üîó fup-auditoria.streamlit.app</a></p>
        <br>
        <p>Atenciosamente,<br>Time de Auditoria</p>
        """

        sucesso = enviar_email_gmail(destinatario=email, assunto="‚è≥ Follow-ups pr√≥ximos do vencimento", corpo_html=corpo)
        if sucesso:
            st.success(f"üìß E-mail enviado para: {email}")

if st.session_state.username in admin_users:
    if st.sidebar.button("üìÖ Enviar lembrete de follow-ups a vencer"):
        enviar_emails_followups_a_vencer()
